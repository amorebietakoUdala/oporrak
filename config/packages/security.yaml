security:
    encoders:
        legacy_bcrypt:
            algorithm: bcrypt
            
        App\Entity\User:
            algorithm: auto
            migrate_from: 
                - legacy_bcrypt

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_OPORRAK, ROLE_BOSS]
        ROLE_BOSS: [ROLE_USER, ROLE_OPORRAK]
        ROLE_HHRR: [ROLE_USER, ROLE_OPORRAK, ROLE_BOSS]
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        amreu_user_provider:
            entity:
                class: App\Entity\User
                property: username
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            provider: amreu_user_provider

            guard:
                authenticators:
                    - amreu.login.form.authenticator
                entry_point: amreu.login.form.authenticator
                
            form_login:
                login_path: user_security_login_check
                check_path: user_security_login_check
                
            logout:
                path: user_security_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: ROLE_USER }
        - { path: ^/[es|eu]/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
